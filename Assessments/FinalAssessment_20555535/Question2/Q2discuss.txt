Note: The images provided are abridged versions of the workings that I did by hand. I used the properties and algorithms in the lectures notes to attempt them by hand at first, and then checked them against https://www.cs.usfca.edu/~galles/visualization, where I then wrote out some summarised versions of my workings. 

There are different ways to delete values depending on how the tree is structured and what the rules are regarding how nodes are placed.

#This information was gathered from the Lecture 5 Notes.
For a binary search tree, there are three cases:
    1. The node has no children; meaning it can be removed without consequence.
    2. The node has one child; meaning the child should be attached to its grandparent node.
    3. The node has two children; meaning the successor of the node must be found to replace it. The successor is the furthest left of the node's right subtree. Any children of successor are attached to their relevant grandparent node.

#This information was gathered from the Lecture 10 Notes.
For a red-black tree, the cases are exactly the same as the binary search tree in terms of deletion of the node, however once the node has been deleted the red-black properties must be maintained in the tree. 
This will only have to be done if the colour of the deleted node is black, due to the fact that the amount of black nodes is now inbalanced.

#This information was gathered from the Lecture 10 Notes, and https://azrael.digipen.edu/~mmead/www/Courses/CS280/Trees-2-3-4-delete.html
For a 2-3-4 tree, there are three cases:
    1. The key to be deleted is in the node, which is a leaf with at least 2 keys including itself. The key is removed from the node and nothing else is done.

    2. The key to be deleted is in the node, which has children. There are three possible choices:
        2.1 If the key's left child has at least 2 keys, then replace the key with it's predecessor and delete the predecessor.
        2.2 The same as 2.1, but for the key's right child.
        2.3 If both children only have one key, merge both children and the key to be deleted together, and now follow rule 1.

    3. The key is not in the node. Then, we follow the nodes until we find it, ensuring that all of the nodes travelled through have at least 2 keys. If they do not, do one of the following:
        3.1 If the child node (target to be descended to) has only 1 key, and has a sibling right next to it with at least 2 keys, and move a parent key to the child, and move a key from the sibling to the parent.
        3.2 If the child node and its siblings right next to it only have 1 key each, then merge the child node with a sibling, and move an element from the parent to the child. 


For a B-Tree, there are two cases:
    1. If the key is in a node that is a leaf.
        1.1 If deleting the key does not violate the minimum number of keys per node, then delete the key.
        1.1 If deleting the key does violate the minimum number of keys per node, then delete the key, and borrow a key from its immediate siblings, left to right.

    2. If the key is in a node that is internal.
        1.1 The deleted key is replaced by its inorder predecessor (largest key of its left subtree) if it has more than the minimum amount of keys.
        1.2 The deleted key is replaced by its inorder successor (smallest key of its right subtree) if it has more than the minimum amount of keys.
        1.3 If either child has the minimum number of keys, merge the children.
